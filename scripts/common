log (){
	date +"[%T] $*" | tee -a "${LOG_FILE}"
}
export -f log

bootstrap(){
	local BOOTSTRAP_DIR=$1
	local IMG_URL=$2

	log "Downloading base image"
	wget -t 3 -O "${STAGE_WORK_DIR}"/base.img.xz "${IMG_URL}"

	log "Uncompressing the image"
	unxz -v "${STAGE_WORK_DIR}"/base.img.xz

	log "Unpacking the filesystem"	

	LOOP_DEV=$(losetup --show -f -P "${STAGE_WORK_DIR}"/base.img)
	BOOT_DEV="${LOOP_DEV}p1"
	ROOT_DEV="${LOOP_DEV}p2"

	mkdir -p "${BOOTSTRAP_DIR}"
	mkdir -p "${STAGE_WORK_DIR}"/mp/boot "${STAGE_WORK_DIR}"/mp/root

	mount -o ro "${BOOT_DEV}" "${STAGE_WORK_DIR}"/mp/boot
	mount -o ro "${ROOT_DEV}" "${STAGE_WORK_DIR}"/mp/root

	rsync -aHAXx "${STAGE_WORK_DIR}"/mp/root/ "${BOOTSTRAP_DIR}"/
	rm "${BOOTSTRAP_DIR}"/boot/firmware/*
	rsync -aHAXx "${STAGE_WORK_DIR}"/mp/boot/ "${BOOTSTRAP_DIR}"/boot/firmware/

	umount "${STAGE_WORK_DIR}"/mp/boot
	umount "${STAGE_WORK_DIR}"/mp/root
	rm -rf "${STAGE_WORK_DIR}"/mp
	losetup -d "${LOOP_DEV}"
}
export -f bootstrap

copy_previous(){
	if [ ! -d "${PREV_ROOTFS_DIR}" ]; then
		echo "Previous stage rootfs not found"
		false
	fi
	mkdir -p "${ROOTFS_DIR}"
	rsync -aHAXx --exclude var/cache/apt/archives "${PREV_ROOTFS_DIR}/" "${ROOTFS_DIR}/"
}
export -f copy_previous

unmount(){
	if [ -z "$1" ]; then
		DIR=$PWD
	else
		DIR=$1
	fi

	while mount | grep -q "$DIR"; do
		local LOCS
		LOCS=$(mount | grep "$DIR" | cut -f 3 -d ' ' | sort -r)
		for loc in $LOCS; do
			umount "$loc"
		done
	done
}
export -f unmount

unmount_image(){
	sync
	sleep 1
	local LOOP_DEVICES
	LOOP_DEVICES=$(losetup --list | grep "$(basename "${1}")" | cut -f1 -d' ')
	for LOOP_DEV in ${LOOP_DEVICES}; do
		if [ -n "${LOOP_DEV}" ]; then
			local MOUNTED_DIR
			MOUNTED_DIR=$(mount | grep "$(basename "${LOOP_DEV}")" | head -n 1 | cut -f 3 -d ' ')
			if [ -n "${MOUNTED_DIR}" ] && [ "${MOUNTED_DIR}" != "/" ]; then
				unmount "$(dirname "${MOUNTED_DIR}")"
			fi
			sleep 1
			losetup -d "${LOOP_DEV}"
		fi
	done
}
export -f unmount_image

on_chroot() {
	if ! mount | grep -q "$(realpath "${ROOTFS_DIR}"/proc)"; then
		mount -t proc proc "${ROOTFS_DIR}/proc"
	fi

	if ! mount | grep -q "$(realpath "${ROOTFS_DIR}"/dev)"; then
		mount --bind /dev "${ROOTFS_DIR}/dev"
	fi
	
	if ! mount | grep -q "$(realpath "${ROOTFS_DIR}"/dev/pts)"; then
		mount --bind /dev/pts "${ROOTFS_DIR}/dev/pts"
	fi

	if ! mount | grep -q "$(realpath "${ROOTFS_DIR}"/sys)"; then
		mount --bind /sys "${ROOTFS_DIR}/sys"
	fi

	setarch linux32 capsh --drop=cap_setfcap "--chroot=${ROOTFS_DIR}/" -- -e "$@"
}
export -f on_chroot
